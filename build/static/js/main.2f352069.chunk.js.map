{"version":3,"sources":["components/Searchbox.js","components/UserList.js","components/UserGrid.js","components/UserPage.js","services/github_api.js","App.js","index.js"],"names":["Searchbox","search","setSearch","setShowUser","setHistory","className","type","value","onChange","e","target","to","onClick","showUser","history","UserList","list","repos","justify-center","size","length","map","item","userArr","filter","repo","owner","login","src","avatar_url","width","alt","href","html_url","rel","name","id","UserGrid","index","sm","justify-content-center","bleed","UserPage","user","userRepo","userOrg","JSON","parse","localStorage","getItem","align","justify-justify-space-around","url","baseurl","auth","process","requestRepo","axios","method","headers","accept","authorization","params","per_page","sort","App","useState","setUser","setUserRepo","setUserOrg","setList","setRepos","showGrid","setShowGrid","useEffect","userList","q","order","then","res","data","items","repoArray","concat","requestUser","setItem","stringify","catch","requestOrg","console","log","hist","exact","path","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f352069.chunk.js","sourcesContent":["//The searchbox component\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Searchbox = ({ search, setSearch, setShowUser, setHistory }) => {\r\n    return (\r\n        <nav className=\"searchBox\">\r\n            <input\r\n                type=\"text\"\r\n                value={search}\r\n                onChange={e => {\r\n                    setSearch(e.target.value)\r\n                }}\r\n            />\r\n            <Link to={`/${search}`}>\r\n                <button\r\n                    onClick={() => {\r\n                        setShowUser(showUser => !showUser)\r\n                        setHistory(history => [...history, search])\r\n                    }}\r\n                >SEARCH</button>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","//Component for the List view of the app\r\n\r\nimport React from \"react\";\r\n//These are components from the reflex-grid library\r\nimport { Row, Col } from \"react-reflex-grid\";\r\n\r\nconst UserList = ({ list, repos }) => {\r\n    return (\r\n        <>\r\n            {/* This Row is the index header at the top of the page */}\r\n            <Row justify-center className=\"index\">\r\n                <Col size={2} className=\"avatar\">\r\n                    Avatar\r\n            </Col>\r\n                <Col size={3}>\r\n                    Username\r\n            </Col>\r\n                <Col size={1}>\r\n                    Type\r\n            </Col>\r\n                <Col size={3}>\r\n                    Repositories\r\n            </Col>\r\n            </Row>\r\n            {/* If the information is available to the state, renders info about the most popular users */}\r\n            {list.length !== 0 && repos.length === 30 && list.map(item => {\r\n                let userArr = repos.filter(repo => repo[0].owner.login === item.login);\r\n                return (\r\n                    <Row key={item.id} className=\"userListRow\" justify-center>\r\n                        <Col size={2}>\r\n                            <img src={item.avatar_url}\r\n                                width=\"90\"\r\n                                alt=\"user avatar\" />\r\n                        </Col>\r\n                        <Col size={3}>\r\n                            <a href={item.html_url}\r\n                                rel=\"noreferrer\"\r\n                                target=\"_blank\">\r\n                                {item.login}\r\n                            </a>\r\n                        </Col>\r\n                        <Col size={1}>\r\n                            {item.type}\r\n                        </Col>\r\n                        <Col size={3}>\r\n                            {userArr[0][0].name}<br />\r\n                            {userArr[0][1].name}<br />\r\n                            {userArr[0][2].name}\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserList;","//The component for the grid view of the app\r\n\r\nimport React from \"react\";\r\n//These are components from the reflex-grid library\r\nimport { Row, Col } from \"react-reflex-grid\";\r\n\r\nconst UserGrid = ({ list, repos }) => {\r\n    return (\r\n        <div>\r\n            <Row justify-center>\r\n                {/* If the user information is available in the state, renders this information to the view */}\r\n                {list.length !== 0 && repos.length === 30 && list.map((item, index) => {\r\n                    let userArr = repos.filter(repo => repo[0].owner.login === item.login);\r\n                    return (\r\n                        <Col size={4} key={item.id} className=\"gridItem\" sm>\r\n                            <Row justify-content-center>\r\n                                <Col size={2}>\r\n                                    <img src={item.avatar_url}\r\n                                        width=\"50\"\r\n                                        alt=\"user avatar\" />\r\n                                </Col>\r\n                                <Col size={4} className=\"gridLogin\">\r\n                                    <a href={item.html_url}\r\n                                        rel=\"noreferrer\"\r\n                                        target=\"_blank\">\r\n                                        {item.login}\r\n                                    </a>\r\n                                    <br />\r\n                                    {item.type}\r\n                                </Col>\r\n                                <Col size={6} className=\"gridRepos\" bleed>\r\n                                    <p>\r\n                                        {userArr[0][0].name}\r\n                                    </p>\r\n                                    <p>\r\n                                        {userArr[0][1].name}\r\n                                    </p>\r\n                                    <p>\r\n                                        {userArr[0][2].name}\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    )\r\n                })}\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserGrid","//This component renders the Specific user view\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//These are components from the reflex-grid library\r\nimport { Row, Col } from \"react-reflex-grid\";\r\n\r\nconst UserPage = ({ user, userRepo, search, userOrg }) => {\r\n\r\n    //Gets the user info from localstorage, so that the page works with reload\r\n    //I had to include this IF statement, because on reload, the search state always becomes empty\r\n    if (search === \"\") {\r\n        user = JSON.parse(localStorage.getItem('selected-user'));\r\n        userRepo = JSON.parse(localStorage.getItem('selected-repo'));\r\n        userOrg = JSON.parse(localStorage.getItem('selected-org'));\r\n    }\r\n    return (\r\n        // This page displays NOT FOUND if a given info is not found\r\n        user === \"NOT FOUND\" ?\r\n            <>\r\n                <Link to=\"/\">\r\n                    <button>HOME</button>\r\n                </Link>\r\n                <h1>NOT FOUND</h1>\r\n            </> :\r\n            <>\r\n                <Link to=\"/\">\r\n                    <button>HOME</button>\r\n                </Link>\r\n                <Row align=\"end\" className=\"userPageProfile\">\r\n                    <Col size={4}>\r\n                        <Row align=\"end\">\r\n                            <Col size={6}>\r\n                                <img src={user.avatar_url}\r\n                                    width=\"140\"\r\n                                    alt=\"user avatar\" />\r\n                            </Col>\r\n                            <Col size={6} bleed>\r\n                                <h2><a\r\n                                    href={user.html_url}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noreferrer\">\r\n                                    {user.login}\r\n                                </a></h2>\r\n                                <h3>{user.type}</h3>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col size={3} bleed className=\"userInfo\">\r\n                        <h2>Repositories</h2>\r\n                    </Col>\r\n                    <Col size={3} bleed className=\"userInfo\">\r\n                        <h2>Organization</h2>\r\n                    </Col>\r\n                </Row>\r\n                <Row justify-justify-space-around bleed>\r\n                    <Col size={4}>\r\n                    </Col>\r\n                    <Col size={3} bleed>\r\n                        {userRepo.length >= 3 ?\r\n                            <>\r\n                                <h3>{userRepo[0].name}</h3>\r\n                                <h3>{userRepo[1].name}</h3>\r\n                                <h3>{userRepo[2].name}</h3>\r\n                            </>\r\n                            :\r\n                            <h2>NOT ENOUGH REPOSITORIES</h2>}\r\n                    </Col>\r\n                    <Col size={3}>\r\n                        {userOrg[0] ?\r\n                            <>\r\n                                <img\r\n                                    src={userOrg[0].avatar_url}\r\n                                    alt=\"Organisation Avatar\"\r\n                                    width=\"100\"\r\n                                />\r\n                                <h1><a\r\n                                    href={userOrg[0].url}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noreferrer\">\r\n                                    {userOrg[0].login}\r\n                                </a></h1>\r\n                            </> :\r\n                            <h2>NO ORG</h2>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default UserPage;","//This is the file that holds functions for interacting with the GithubApi\r\n\r\nimport axios from \"axios\";\r\n\r\n//The base url of the app\r\nconst baseurl = \"https://api.github.com\";\r\n\r\n//Github authorization token, which is loaded from the environment variable\r\nconst auth = `token ${process.env.REACT_APP_GITHUB_TOKEN}`;\r\n\r\n\r\n//This requests the Avatar, login and type info from the api, ordered by followers\r\nexport const requestAll = () => {\r\n    return axios({\r\n        method: \"GET\",\r\n        url: `${baseurl}/search/users`,\r\n        params: {\r\n            q: \"followers:>1000\",\r\n            sort: 'followers',\r\n            order: \"desc\"\r\n        },\r\n        headers: {\r\n            accept: \"application/vnd.github.v3+json\",\r\n            authorization: auth\r\n        }\r\n    })\r\n}\r\n\r\n\r\n//This requests the Avatar, login and type info from the api for a specific user\r\nexport const requestUser = user => {\r\n    return axios({\r\n        method: \"GET\",\r\n        url: `${baseurl}/users/${user}`,\r\n        params: {\r\n            q: user\r\n        },\r\n        headers: {\r\n            accept: \"application/vnd.github.v3+json\",\r\n            authorization: auth\r\n        }\r\n    })\r\n}\r\n\r\n//Requests Repo info for a given user\r\nexport const requestRepo = user => {\r\n    return axios({\r\n        method: \"GET\",\r\n        url: `${baseurl}/users/${user}/repos`,\r\n        headers: {\r\n            accept: \"application/vnd.github.v3+json\",\r\n            authorization: auth\r\n        },\r\n        params: {\r\n            per_page: 3,\r\n            sort: \"updated\"\r\n        }\r\n    })\r\n}\r\n\r\n\r\n//Requests the Organisation info for a specific user\r\nexport const requestOrg = user => {\r\n    return axios({\r\n        method: \"GET\",\r\n        url: `${baseurl}/users/${user}/orgs`,\r\n        headers: {\r\n            accept: \"application/vnd.github.v3+json\",\r\n            authorization: auth\r\n        }\r\n    })\r\n}","//The main APP component which holds all state and lifecycle methods\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport Searchbox from './components/Searchbox';\r\nimport UserList from \"./components/UserList\"\r\nimport UserGrid from \"./components/UserGrid\"\r\nimport UserPage from \"./components/UserPage\"\r\nimport { requestAll, requestRepo, requestUser, requestOrg } from \"./services/github_api.js\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n\r\n    //STATE ------------------------------------------------------------------\r\n\r\n    //State that holds what is being curently typed in the searchbar\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    //State that holds which user are we searching for\r\n    const [user, setUser] = useState([]);\r\n\r\n    //State for the searched user's 3 repos\r\n    const [userRepo, setUserRepo] = useState([]);\r\n\r\n    //State for the searched user's Organisation info\r\n    const [userOrg, setUserOrg] = useState([]);\r\n\r\n    //State that knows whether the information about one specific user is being displayed\r\n    //It is mainly used as a dependancy in useEffect hooks. Upon changing this state, the information\r\n    //Regarding the user is loaded in relevant states - user, userRepo and userOrg\r\n    const [showUser, setShowUser] = useState(false);\r\n\r\n    //Loads the Avatar, Login and Type for the most popular users, to be displayed on home page - either\r\n    //as a list or as a grid\r\n    const [list, setList] = useState([]);\r\n\r\n    //Loads the 3 most recent repos of the most popular users, to be displayed on home page - either \r\n    //as a lsit or as a grid\r\n    const [repos, setRepos] = useState([]);\r\n\r\n    //Triggers Grid view or List view\r\n    const [showGrid, setShowGrid] = useState(false);\r\n\r\n    //State responsible for showing the search history\r\n    const [history, setHistory] = useState([]);\r\n\r\n\r\n    //LIFECYCLE METHODS ---------------------------------------------------\r\n\r\n    //loads the Avatar, Login and Type info from Github API using an axios request, that's\r\n    //defined in a separate file\r\n    useEffect(() => {\r\n        let userList = [];\r\n        requestAll()\r\n            .then(res => {\r\n                userList = res.data.items\r\n                setList(userList);\r\n            });\r\n    }, [])\r\n\r\n    //loads the Repository info from Github API using an axios request, that's\r\n    //defined in a separate file\r\n    useEffect(() => {\r\n        let repoArray = [];\r\n        list.map(item => {\r\n            return requestRepo(item.login)\r\n                .then(res => repoArray = repoArray.concat([[res.data[0], res.data[1], res.data[2]]]))\r\n                .then(() => setRepos(repoArray))\r\n        })\r\n    }, [list])\r\n\r\n    ////loads the specific user info from Github API using an axios request, that's\r\n    //defined in a separate file. This info is then displayed on the separate user page\r\n    useEffect(() => {\r\n        requestUser(search)\r\n            .then(res => {\r\n                setUser(res.data)\r\n                localStorage.setItem(\"selected-user\", JSON.stringify(res.data));\r\n            })\r\n            .catch(() => {\r\n                setUser(\"NOT FOUND\")\r\n            })\r\n    }, [showUser])\r\n\r\n    //loads the specific user --repository-- info from Github API using an axios request, that's\r\n    //defined in a separate file. This info is then displayed on the separate user page\r\n    useEffect(() => {\r\n        requestRepo(search)\r\n            .then(res => {\r\n                setUserRepo(res.data)\r\n                localStorage.setItem(\"selected-repo\", JSON.stringify(res.data))\r\n            })\r\n            .catch(() => {\r\n                setUserRepo(\"NOT FOUND\")\r\n            })\r\n    }, [showUser])\r\n\r\n    //loads the specific user --organisation-- info from Github API using an axios request, that's\r\n    //defined in a separate file. This info is then displayed on the separate user page\r\n    useEffect(() => {\r\n        requestOrg(search)\r\n            .then(res => {\r\n                setUserOrg(res.data)\r\n                localStorage.setItem(\"selected-org\", JSON.stringify(res.data))\r\n                console.log(res.data);\r\n            })\r\n            .catch(() => {\r\n                setUserOrg(\"NOT FOUND\")\r\n            })\r\n    }, [showUser])\r\n\r\n\r\n    //Loads the search history from localStorage, if the information exists there\r\n    useEffect(() => {\r\n        let hist = JSON.parse(localStorage.getItem(\"history\"))\r\n        if (!hist) {\r\n            setHistory([])\r\n        } else {\r\n            setHistory(hist)\r\n        }\r\n    }, [])\r\n\r\n    //Uploads search terms to localStorage\r\n    useEffect(() => {\r\n        localStorage.setItem('history', JSON.stringify(history))\r\n    }, [history])\r\n\r\n    return (\r\n        <>\r\n            <Router>\r\n                {/* The Searchbox component is available in all views of the app */}\r\n                <Searchbox\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    setShowUser={setShowUser}\r\n                    showUser={showUser}\r\n                    setHistory={setHistory}\r\n                />\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <button onClick={() => {\r\n                            setShowGrid(prev => !prev)\r\n                        }}>{showGrid === false ? \"GRID VIEW\" : \"LIST VIEW\"}</button>\r\n                        {history.length > 0 ? <div>\r\n                            Search History:\r\n                                <span className=\"history\">{history[history.length - 1]}</span>\r\n                            <span className=\"history\">{history[history.length - 2]}</span>\r\n                            <span className=\"history\">{history[history.length - 3]}</span>\r\n                        </div> : null}\r\n                        {showGrid ?\r\n                            // List and Grid views\r\n                            < UserGrid\r\n                                list={list}\r\n                                repos={repos} /> :\r\n                            <UserList\r\n                                list={list}\r\n                                repos={repos}\r\n                            />}\r\n                    </Route>\r\n                    <Route path={`/${search}`}>\r\n                        {/* User Page view */}\r\n                        <UserPage\r\n                            user={user}\r\n                            userRepo={userRepo}\r\n                            search={search}\r\n                            userOrg={userOrg}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Container } from \"react-reflex-grid\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* The Container of the Reflex-Grid library */}\r\n    <Container>\r\n      <App />\r\n    </Container>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}